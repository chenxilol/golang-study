// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: manyService.proto

package many_service_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManyServiceOne_Sort_FullMethodName = "/many_service_grpc.ManyServiceOne/Sort"
)

// ManyServiceOneClient is the client API for ManyServiceOne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManyServiceOneClient interface {
	Sort(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error)
}

type manyServiceOneClient struct {
	cc grpc.ClientConnInterface
}

func NewManyServiceOneClient(cc grpc.ClientConnInterface) ManyServiceOneClient {
	return &manyServiceOneClient{cc}
}

func (c *manyServiceOneClient) Sort(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error) {
	out := new(BytesResponse)
	err := c.cc.Invoke(ctx, ManyServiceOne_Sort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManyServiceOneServer is the server API for ManyServiceOne service.
// All implementations must embed UnimplementedManyServiceOneServer
// for forward compatibility
type ManyServiceOneServer interface {
	Sort(context.Context, *BytesRequest) (*BytesResponse, error)
	mustEmbedUnimplementedManyServiceOneServer()
}

// UnimplementedManyServiceOneServer must be embedded to have forward compatible implementations.
type UnimplementedManyServiceOneServer struct {
}

func (UnimplementedManyServiceOneServer) Sort(context.Context, *BytesRequest) (*BytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sort not implemented")
}
func (UnimplementedManyServiceOneServer) mustEmbedUnimplementedManyServiceOneServer() {}

// UnsafeManyServiceOneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManyServiceOneServer will
// result in compilation errors.
type UnsafeManyServiceOneServer interface {
	mustEmbedUnimplementedManyServiceOneServer()
}

func RegisterManyServiceOneServer(s grpc.ServiceRegistrar, srv ManyServiceOneServer) {
	s.RegisterService(&ManyServiceOne_ServiceDesc, srv)
}

func _ManyServiceOne_Sort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManyServiceOneServer).Sort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManyServiceOne_Sort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManyServiceOneServer).Sort(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManyServiceOne_ServiceDesc is the grpc.ServiceDesc for ManyServiceOne service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManyServiceOne_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "many_service_grpc.ManyServiceOne",
	HandlerType: (*ManyServiceOneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sort",
			Handler:    _ManyServiceOne_Sort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manyService.proto",
}

const (
	ManyServiceOne1_Sort1_FullMethodName = "/many_service_grpc.ManyServiceOne1/Sort1"
)

// ManyServiceOne1Client is the client API for ManyServiceOne1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManyServiceOne1Client interface {
	Sort1(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error)
}

type manyServiceOne1Client struct {
	cc grpc.ClientConnInterface
}

func NewManyServiceOne1Client(cc grpc.ClientConnInterface) ManyServiceOne1Client {
	return &manyServiceOne1Client{cc}
}

func (c *manyServiceOne1Client) Sort1(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*BytesResponse, error) {
	out := new(BytesResponse)
	err := c.cc.Invoke(ctx, ManyServiceOne1_Sort1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManyServiceOne1Server is the server API for ManyServiceOne1 service.
// All implementations must embed UnimplementedManyServiceOne1Server
// for forward compatibility
type ManyServiceOne1Server interface {
	Sort1(context.Context, *BytesRequest) (*BytesResponse, error)
	mustEmbedUnimplementedManyServiceOne1Server()
}

// UnimplementedManyServiceOne1Server must be embedded to have forward compatible implementations.
type UnimplementedManyServiceOne1Server struct {
}

func (UnimplementedManyServiceOne1Server) Sort1(context.Context, *BytesRequest) (*BytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sort1 not implemented")
}
func (UnimplementedManyServiceOne1Server) mustEmbedUnimplementedManyServiceOne1Server() {}

// UnsafeManyServiceOne1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManyServiceOne1Server will
// result in compilation errors.
type UnsafeManyServiceOne1Server interface {
	mustEmbedUnimplementedManyServiceOne1Server()
}

func RegisterManyServiceOne1Server(s grpc.ServiceRegistrar, srv ManyServiceOne1Server) {
	s.RegisterService(&ManyServiceOne1_ServiceDesc, srv)
}

func _ManyServiceOne1_Sort1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManyServiceOne1Server).Sort1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManyServiceOne1_Sort1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManyServiceOne1Server).Sort1(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManyServiceOne1_ServiceDesc is the grpc.ServiceDesc for ManyServiceOne1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManyServiceOne1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "many_service_grpc.ManyServiceOne1",
	HandlerType: (*ManyServiceOne1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sort1",
			Handler:    _ManyServiceOne1_Sort1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manyService.proto",
}
